package com.example.rabbitmqexample.configurations;

import org.springframework.amqp.core.AmqpTemplate;
import org.springframework.amqp.core.Binding;
import org.springframework.amqp.core.BindingBuilder;
import org.springframework.amqp.core.Queue;
import org.springframework.amqp.core.TopicExchange;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
import org.springframework.amqp.support.converter.MessageConverter;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;


@Configuration
public class RabbitQueueConfiguration {
	
	@Value("${rabbitmq.exchange.name}")
	private String exchange_name;
	
	@Value("${rabbitmq.queue.name}")
	private String queue_name;
	
	@Value("${rabbitmq.routing.key}")
	private String routing_key;
	
	@Value("${rabbitmq.json.queue.name}")
	private String json_queue_name;
	
	@Value("${rabbitmq.json.routing.key}")
	private String json_routing_key;


    @Bean
    Queue getQueue() {
		return new Queue(queue_name);
	}
	
	@Bean
	TopicExchange getTopicExchanger() {
		return new TopicExchange(exchange_name);
	}
	
//	@Bean
//    Queue getJsonQueue() {
//		return new Queue(json_queue_name);
//	}

	
	@Bean
	Binding bindExachangeQueue(){
		return BindingBuilder
					.bind(getQueue())
					.to(getTopicExchanger())
					.with(routing_key);
		
	}
	
	@Bean
	Binding JsonBindExachangeQueue(){
		return BindingBuilder
					.bind(getJsonQueue())
					.to(getTopicExchanger())
					.with(json_routing_key);
		
	}
	
	@Bean
	MessageConverter getMessageConverter() {
		return new Jackson2JsonMessageConverter();
	}
	
	@Bean
	AmqpTemplate geAmqptemplate(ConnectionFactory connFactory) {
		RabbitTemplate template = new RabbitTemplate(connFactory); 
		template.setMessageConverter(getMessageConverter());
		return template;
	}
	
}
